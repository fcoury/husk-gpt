name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Check formatting
        run: cargo fmt --all --check
        
      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings
        
      - name: Run tests
        run: cargo test --all-features --workspace
        
      - name: Build project
        run: cargo build --all-features --workspace

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Cache Rust dependencies  
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Build compiler
        run: cargo build --release
        
      - name: Create test directory
        run: mkdir -p integration_test
        
      - name: Create test Husk file
        run: |
          cat > integration_test/test.hk << 'EOF'
          pub enum Status {
              Active,
              Inactive,
              Pending(string)
          }
          
          pub fn get_status_message(status: Status) -> string {
              match status {
                  Active => "System is active",
                  Inactive => "System is inactive", 
                  Pending(msg) => msg
              }
          }
          
          pub fn main() {
              let status = Status::Pending("Loading...");
              get_status_message(status)
          }
          EOF
          
      - name: Compile Husk to JavaScript
        run: |
          ./target/release/huskc build integration_test/test.hk --out-dir dist
          
      - name: Verify generated JavaScript
        run: |
          # Check that files were generated
          test -f dist/test.js || (echo "JavaScript file not generated" && exit 1)
          test -f dist/test.d.ts || (echo "TypeScript declaration file not generated" && exit 1)
          
          # Check JavaScript has basic structure
          grep -q "const Status_Active" dist/test.js || (echo "Missing Status_Active" && exit 1) 
          grep -q "function Status_Pending" dist/test.js || (echo "Missing Status_Pending function" && exit 1)
          grep -q "export.*Status_Active" dist/test.js || (echo "Missing Status_Active export" && exit 1)
          grep -q "export.*get_status_message" dist/test.js || (echo "Missing get_status_message export" && exit 1)
          
          # Check TypeScript declarations
          grep -q "export declare const Status_Active" dist/test.d.ts || (echo "Missing TypeScript Status_Active declaration" && exit 1)
          grep -q "export declare function get_status_message" dist/test.d.ts || (echo "Missing TypeScript function declaration" && exit 1)
          
      - name: Test JavaScript execution  
        run: |
          # Create a Node.js test script
          cat > integration_test/test.js << 'EOF'
          const husk = require('../dist/test.js');
          
          console.log('Testing Husk-generated JavaScript...');
          
          // Test enum variant creation
          const active = husk.Status_Active;
          const pending = husk.Status_Pending("Custom message");
          
          console.log('Active status:', active);
          console.log('Pending status:', pending);
          
          // Test function call
          const message1 = husk.get_status_message(active);
          const message2 = husk.get_status_message(pending);
          
          console.log('Active message:', message1);
          console.log('Pending message:', message2);
          
          // Basic assertions
          if (active.tag !== 'Active') {
            console.error('Expected Active tag');
            process.exit(1);
          }
          
          if (pending.tag !== 'Pending' || pending[0] !== 'Custom message') {
            console.error('Expected Pending with message');
            process.exit(1);
          }
          
          if (message1 !== 'System is active') {
            console.error('Expected "System is active", got:', message1);
            process.exit(1);
          }
          
          if (message2 !== 'Custom message') {
            console.error('Expected "Custom message", got:', message2);
            process.exit(1);
          }
          
          console.log('âœ… All tests passed!');
          EOF
          
          # Run the test
          cd integration_test
          node test.js